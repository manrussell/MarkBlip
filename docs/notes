folders for project
===================
src
inc
docs
debug
release
schematics
original code for meeblip
- maybe put in winavr/usbasp drivers/zadig/ downloaded tutorials/datasheets

make file todo
==============

input  .c location
input  .h location
output location

update clean! or check it ...


Useful makefile variables
=========================

F_CPU = 16000000

# Target file name (without extension).
$(TARGET) ... TARGET = main

# List C source files here. (C dependencies are automatically generated.)
SRC = $(TARGET).c $(SRC_FOLDER)/uart.c

# List any extra directories to look for include files here.
EXTRAINCDIRS

useful make targets
==================

all printed at the top of the makefile.

to use programmers notepad to make and program, you must have the makefile
selected else it fails. -or use commandline

# Program the device.  --backup with burn fuses
program: $(TARGET).hex $(TARGET).eep
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH) $(AVRDUDE_WRITE_EEPROM) $(AVRDUDE_FUSES)
    
uart
====
use transistor as a ground use +'ve led pin as tx pin

usb cable - black wire is ground
?? check when its light - is tx pin

switch matrix
=============
when switches are up - near uC value is '0' (else we get 1,2,4,8)

need to have a delay -- used 12 nop's as any shorter still gave errors

when gpio set as input it floats, therefore to disable the column set as input

I have ignored the midi channel dip switches for now - just leave as input

POT array
=========
channel 0 is far right


Dac
===
in assembly file we have

; Output Sample
;
; Write the 16-bit signed output of the DCA to the DAC.

;write sample (r31:r30) to DAC:

			sbi		PORTD, 3			; Set WR high
		    subi	r31, 128		    ; U2 --> PB
			cbi		PORTD, 2			; Select DAC port A
			out	    PORTC, r31	        ; output most significant byte
			cbi		PORTD, 3			; Pull WR low to load buffer A
			sbi		PORTD, 3			; Set WR high
			sbi		PORTD, 2			; Select DAC port B
			out	    PORTC, r30	        ; output least significant byte
			cbi		PORTD, 3			; Pull WR low to load buffer B
			sbi		PORTD, 3			; Set WR high again


avr assembly instructions ...
section 31 of the datasheet

subi - Subtracts a register and a constant and places the result in the destination register Rd

out - store register to i/o location. Stores data from register Rr in the register file to I/O Space (Ports, Timers, Configuration registers etc.).

cbi - Clears a specified bit in an I/O register
sbi - Sets a specified bit in an I/O register

DAC HW
=====================
mixer -> lp filter -> lp filter -> volume -> jack plug

stated sample rate in original meeblip v1.31 .asm - 36363.63636 Hz
looks like two sallen and key low pass filters,
i ran the first LP through a circuit simulator on my phone, 
i would believe it had a cutoff freq of approx sampleRate/2 = 18181.81818 Hz

DAC Issues
==========

to test i set up a switch when in the 'up' position would output to DAC 0xFF, when in the 'down' position output a 0x0 

i probed the DAC pins as they were easiest to deal with.

Results:
    when in 'up' position 0xFF, all pins (C0-C7) should be high
    Pin 4, PC4 was low !!

    when in the 'down' position 0x0, all pins (C0-C7) should be low
    pin 3/5/6 were high !!




objdump
=======

avr-objdump -S main.elf > markDissassembly



Basic triangular test for dac
=============================

ramp function will have 65536 increments
i want this periodic function to happen 440 times per second 
therefore 440*65536 = 28,835,840


========================================================================
ToDo
====

copy batch flash file for original meeblip code
what to do with tutorials i used?
what to do with original meeblip code / schematics?

;	PB7			DAC LDAC signal (load both DAC ports synchronously)
;	PC0-PC7		DATA port for DAC


i'm not suer the .h are being used properly, i did have the bin/hex files in the header and still was fine using functions - check.


SRC = $(TARGET).c $(SRC_FOLDER)/uart.c $(SRC_FOLDER)/adc.c $(SRC_FOLDER)/switches.c $(SRC_FOLDER)/dac.c $(SRC_FOLDER)/waveforms.c

